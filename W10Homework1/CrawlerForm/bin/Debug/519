<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>coding++ - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=-oFz8B4m7JhHaZzdTkzPza2oLZNDRR8obnCz6w7OHbU" />
    <link id="MainCss" rel="stylesheet" href="/skins/darkgreentrip/bundle-darkgreentrip.min.css?v=4KE41eS1YQSSwl64fGzzTUj6ijs-YQFat4AaN-g_jxc" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/darkgreentrip/bundle-darkgreentrip-mobile.min.css?v=0pGk3D9Ik_jI4q1TALBT2ybOjIePHS_80_0J4DDOQiY" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/codingmode/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/codingmode/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/codingmode/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=z6JkvKQ7L_bGD-nwJExYzsoFf5qnluqZJru6RsfoZuM"></script>
    <script>
        var currentBlogId = 506835;
        var currentBlogApp = 'codingmode';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'darkgreentrip';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/codingmode/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/codingmode/">coding++</a>
</h1>
<h2>

</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/codingmode/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/coding%2B%2B">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/codingmode/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
91&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
8</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		
<!--done-->




		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/codingmode/archive/2020/04/26.html">2020年4月26日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/codingmode/p/12782828.html">
    coding++：@DisallowConcurrentExecution 注解的作用
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：Quartz定时任务默认都是并发执行的，不会等待上一次任务执行完毕，只要间隔时间到就会执行, 如果定时任执行太长，会长时间占用资源，导致其它任务堵塞。 在Spring中这时需要设置concurrent的值为false, 禁止并发执行。 &lt;property name=&quot;concurrent&quot; valu            <a href="https://www.cnblogs.com/codingmode/p/12782828.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">

posted @ 2020-04-26 22:25 coding++ 阅读 (24) 评论 (0)
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12782828" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/codingmode/archive/2020/04/25.html">2020年4月25日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/codingmode/p/12773262.html">
    coding++：java 如何获取resources下的文件
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：当我们想要获取mysql.properties、oracle.properties、bayonetConfig.txt文件里面内容的时候，我们一般会采用不同的方式，面对是properties，那么我所采用的是。 ResourceBundle bundle = ResourceBundle.getBu            <a href="https://www.cnblogs.com/codingmode/p/12773262.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">

posted @ 2020-04-25 15:30 coding++ 阅读 (8) 评论 (0)
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12773262" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/codingmode/archive/2020/04/16.html">2020年4月16日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/codingmode/p/12716824.html">
    coding++：Spring 中的 AOP 原理
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：为什么使用 AOP 如下场景： 现在有一个情景： 我们要把大象放进冰箱，步骤为：打开冰箱-&gt;放入大象-&gt;关闭冰箱 如果再把大象拿出来，步骤为：打开冰箱-&gt;拿出大象-&gt;关闭冰箱 代码如下： public void put() { System.out.println(&quot;打开冰箱...&quot;); Syste            <a href="https://www.cnblogs.com/codingmode/p/12716824.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">

posted @ 2020-04-16 23:35 coding++ 阅读 (257) 评论 (5)
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12716824" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
            <div class="postSeparator"></div>
        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/codingmode/p/12716495.html">
    coding++：都说新的Arraylist 扩容是(1.5倍+1) 看了1.8的源代码发现不是这么回事
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：都说新的Arraylist 扩容是(1.5倍+1) 看了1.8的源代码发现不是这么回事 就用下面这段代码在jdk的三个版本运行看了下效果： import java.lang.reflect.Field; import java.util.ArrayList; public class ArrayLi            <a href="https://www.cnblogs.com/codingmode/p/12716495.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">

posted @ 2020-04-16 22:49 coding++ 阅读 (18) 评论 (0)
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12716495" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
            <div class="postSeparator"></div>
        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/codingmode/p/12716413.html">
    coding++：jdk1.7  HashMap 的get()和put() 源码
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：HashMap的概述： 基于哈希表的 Map 接口的实现。 此实现提供所有可选的映射操作，并允许使用 null 值和 null 键。 （除了非同步和允许使用 null 之外，HashMap 类与 Hashtable 大致相同。） 此类不保证映射的顺序，特别是它不保证该顺序恒久不变。 此实现假定哈希函            <a href="https://www.cnblogs.com/codingmode/p/12716413.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">

posted @ 2020-04-16 22:38 coding++ 阅读 (23) 评论 (0)
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12716413" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
            <div class="postSeparator"></div>
        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/codingmode/p/12715051.html">
    coding++：HashMap 对于存储的 null 是如何处理的
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：前言： 我们知道 HashMap 集合是允许存放 null 值的。 hashMap 是根据 key 的 hashCode 来寻找存放位置的，那当 key 为null时，&#160;问题来了 它怎么就可以存储 null 值了那？ 特此提笔记录：源码瞧一瞧就一目了然了 HashMap 允许插入键为 null 的键            <a href="https://www.cnblogs.com/codingmode/p/12715051.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">

posted @ 2020-04-16 22:11 coding++ 阅读 (13) 评论 (0)
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12715051" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
            <div class="postSeparator"></div>
        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/codingmode/p/12709835.html">
    coding++：漫画版-了解什么是分布式事务？
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：————— 第二天 ————— ———————————— 假如没有分布式事务： 在一系列微服务系统当中，假如不存在分布式事务，会发生什么呢？让我们以互联网中常用的交易业务为例子： 上图中包含了库存和订单两个独立的微服务，每个微服务维护了自己的数据库。 在交易系统的业务逻辑中，一个商品在下单之前需要先            <a href="https://www.cnblogs.com/codingmode/p/12709835.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">

posted @ 2020-04-16 00:43 coding++ 阅读 (13) 评论 (0)
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12709835" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/codingmode/archive/2020/04/15.html">2020年4月15日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/codingmode/p/12706662.html">
    coding++：Dubbo的介绍和架构
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：1）：前言 随着互联网的发展，网站应用的规模不断扩大，软件架构也在不断演进。 单一应用架构： 当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。 此时，用于简化增删改查工作量的数据访问框架(ORM)是关键。 垂直应用架构： 当访问量逐渐增大，单一应用增加机器带来的加速度越            <a href="https://www.cnblogs.com/codingmode/p/12706662.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">

posted @ 2020-04-15 17:19 coding++ 阅读 (13) 评论 (0)
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12706662" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
            <div class="postSeparator"></div>
        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/codingmode/p/12705818.html">
    coding++：springboot 多线程@Async
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：线程池ThreadPoolExecutor，它的执行规则如下： 在Springboot中对其进行了简化处理，只需要配置一个类型为 java.util.concurrent.TaskExecutor或其子类的bean，并在配置类或直接在程序入口类上声明注解@EnableAsync。 调用也简单，在由S            <a href="https://www.cnblogs.com/codingmode/p/12705818.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">

posted @ 2020-04-15 15:47 coding++ 阅读 (16) 评论 (0)
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12705818" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
            <div class="postSeparator"></div>
        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/codingmode/p/12705354.html">
    coding++：java 线程池概述
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：前言： 1）：创建一个可缓存线程池 2）：创建一个可重用固定个数的线程池，以共享的无界队列方式来运行这些线程。 3）：创建一个定长线程池，支持定时及周期性任务执行 4）：创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。 5）            <a href="https://www.cnblogs.com/codingmode/p/12705354.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">

posted @ 2020-04-15 14:59 coding++ 阅读 (141) 评论 (0)
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12705354" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>



<div class="topicListFooter">
    <div id="nav_next_page">
        
    <a href="https://www.cnblogs.com/codingmode/default.html?page=2">
        下一页
    </a>

    </div>    
</div>








	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 coding&#x2B;&#x2B;
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>